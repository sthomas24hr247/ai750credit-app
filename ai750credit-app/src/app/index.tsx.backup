'use client'

import React, { useState, useEffect } from 'react';
import LandingPage from '../components/LandingPage';
import AuthApp from './AuthApp';
const MainRouter = () => {
  const [currentView, setCurrentView] = useState('landing');
  const [authMode, setAuthMode] = useState('login'); // 'login' or 'signup'

  // Check if user should go directly to auth (via URL params or localStorage)
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const directAuth = urlParams.get('auth');
    const mode = urlParams.get('mode');
    
    if (directAuth === 'true') {
      setCurrentView('auth');
      if (mode === 'signup') {
        setAuthMode('signup');
      }
    }
  }, []);

  const handleSignUp = () => {
    setAuthMode('signup');
    setCurrentView('auth');
    // Update URL for direct access
    const url = new URL(window.location);
    url.searchParams.set('auth', 'true');
    url.searchParams.set('mode', 'signup');
    window.history.pushState({}, '', url);
  };

  const handleSignIn = () => {
    setAuthMode('login');
    setCurrentView('auth');
    // Update URL for direct access
    const url = new URL(window.location);
    url.searchParams.set('auth', 'true');
    url.searchParams.set('mode', 'login');
    window.history.pushState({}, '', url);
  };

  const handleBackToLanding = () => {
    setCurrentView('landing');
    // Clean URL
    const url = new URL(window.location);
    url.searchParams.delete('auth');
    url.searchParams.delete('mode');
    window.history.pushState({}, '', url);
  };

  if (currentView === 'auth') {
    return <AuthApp initialMode={authMode} onBackToLanding={handleBackToLanding} />;
  }

  return (
    <LandingPage 
      onSignUp={handleSignUp}
      onSignIn={handleSignIn}
    />
  );
};

export default MainRouter;