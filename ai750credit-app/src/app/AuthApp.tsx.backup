'use client'

import React, { useState, useEffect, createContext, useContext } from 'react';
import { 
  Upload, FileText, BarChart3, Clock, Target, Users, DollarSign, TrendingUp, Mail, 
  Shield, Settings, User, LogOut, Menu, X, Download, Calendar, AlertTriangle, 
  CheckCircle, XCircle, Plus, Search, Filter, Eye, Edit, Trash2, Send, Phone, 
  MapPin, CreditCard, Zap, Star, Award, FileImage, FileSpreadsheet, RefreshCw 
} from 'lucide-react';

// Import all helpers from supabase
import { 
  supabase, 
  authHelpers, 
  profileHelpers, 
  adminHelpers, 
  creditFreezeHelpers, 
  activityHelpers, 
  dashboardHelpers 
} from '../lib/supabase';

// Import the UserManagement component
import UserManagementComponent from '../components/UserManagement';

// Auth Context
const AuthContext = createContext({});
const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error('useAuth must be used within AuthProvider');
  return context;
};

// Auth Provider Component
const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);

  useEffect(() => {
    const getInitialSession = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          setUser(session.user);
          await loadUserData(session.user.id);
        }
      } catch (error) {
        console.error('Error getting initial session:', error);
      } finally {
        setLoading(false);
      }
    };

    getInitialSession();

    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Auth state changed:', event, session?.user?.email);
        
        if (event === 'SIGNED_IN' && session?.user) {
          setUser(session.user);
          await loadUserData(session.user.id);
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setProfile(null);
          setIsAdmin(false);
        }
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const loadUserData = async (userId) => {
    try {
      console.log('Loading user data for:', userId);
      
      // Try to get existing profile
      const { data: profileData, error: profileError } = await profileHelpers.getProfile(userId);
      
      if (profileError && profileError.code !== 'PGRST116') {
        // PGRST116 is "not found" error, which is expected for new users
        console.error('Error loading profile:', profileError);
        return;
      }
      
      if (profileData) {
        console.log('Profile found:', profileData);
        setProfile(profileData);
      } else {
        console.log('No profile found - new user');
        // For new users, we'll create a basic profile
        setProfile({
          id: userId,
          first_name: '',
          last_name: '',
          status: 'active',
          subscription_status: 'trial'
        });
      }

      // Check admin status
      const { isAdmin: adminStatus, error: adminError } = await adminHelpers.isAdmin(userId);
      if (!adminError && adminStatus) {
        setIsAdmin(true);
        console.log('User is admin');
      } else {
        setIsAdmin(false);
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const signUp = async (email, password, userData) => {
    try {
      setLoading(true);
      console.log('Starting signup for:', email);
      
      const { data, error } = await authHelpers.signUp(email, password, userData);
      
      if (error) {
        console.error('Signup error:', error);
        return { data: null, error };
      }

      console.log('Raw signup response from Supabase:', JSON.stringify(data, null, 2));
      console.log('User object:', data?.user);
      console.log('Session object:', data?.session);
      console.log('Has user but no session?', !!(data?.user && !data?.session));

      // Primary check: user created but no session means email confirmation required
      if (data?.user && !data?.session) {
        console.log('✅ Email confirmation required detected - user exists, no session');
        return { 
          data, 
          error: null, 
          needsConfirmation: true,
          message: 'Account created successfully! Please check your email and click the confirmation link to complete signup.'
        };
      }

      // Secondary check: if user is not confirmed (common Supabase pattern)
      if (data?.user && data?.user?.email_confirmed_at === null) {
        console.log('✅ Email confirmation required detected - email_confirmed_at is null');
        return { 
          data, 
          error: null, 
          needsConfirmation: true,
          message: 'Account created successfully! Please check your email and click the confirmation link to complete signup.'
        };
      }

      // If we have both user and session (instant confirmation - rare)
      if (data?.user && data?.session) {
        console.log('Creating profile for immediately confirmed user');
        
        try {
          const profileData = {
            id: data.user.id,
            email: email,
            first_name: userData.firstName || '',
            last_name: userData.lastName || '',
            phone: userData.phone || '',
            status: 'active',
            subscription_status: 'trial',
            trial_ends_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            created_at: new Date().toISOString()
          };

          const { error: profileError } = await profileHelpers.createProfile(data.user.id, profileData);
          
          if (profileError) {
            console.error('Profile creation error:', profileError);
          } else {
            console.log('Profile created successfully');
          }

          await activityHelpers.logActivity(data.user.id, 'user_signup', {
            email: email,
            signup_method: 'email_password',
            timestamp: new Date().toISOString()
          });

        } catch (profileCreationError) {
          console.error('Error in profile creation:', profileCreationError);
        }
      }

      return { data, error: null };
    } catch (error) {
      console.error('Signup error:', error);
      return { data: null, error: { message: error.message || 'An unexpected error occurred' } };
    } finally {
      setLoading(false);
    }
  };

  const signIn = async (email, password) => {
    try {
      setLoading(true);
      console.log('Starting signin for:', email);
      
      const { data, error } = await authHelpers.signIn(email, password);
      
      if (error) {
        console.error('Signin error:', error);
        return { data: null, error };
      }

      console.log('Signin successful:', data);

      // Update last login
      if (data.user) {
        try {
          await profileHelpers.updateLastLogin(data.user.id);
          await activityHelpers.logActivity(data.user.id, 'user_login', {
            timestamp: new Date().toISOString()
          });
        } catch (updateError) {
          console.error('Error updating last login:', updateError);
          // Don't fail signin for this
        }
      }

      return { data, error: null };
    } catch (error) {
      console.error('Signin error:', error);
      return { data: null, error: { message: error.message || 'An unexpected error occurred' } };
    } finally {
      setLoading(false);
    }
  };

  const signOut = async () => {
    try {
      if (user) {
        await activityHelpers.logActivity(user.id, 'user_logout', { 
          timestamp: new Date().toISOString() 
        });
      }
      
      const { error } = await authHelpers.signOut();
      if (error) {
        console.error('Signout error:', error);
        return { error };
      }

      return { error: null };
    } catch (error) {
      console.error('Signout error:', error);
      return { error };
    }
  };

  const value = {
    user,
    profile,
    isAdmin,
    loading,
    signUp,
    signIn,
    signOut,
    helpers: {
      auth: authHelpers,
      profile: profileHelpers,
      admin: adminHelpers,
      activity: activityHelpers,
      creditFreeze: creditFreezeHelpers,
      dashboard: dashboardHelpers
    }
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Authentication Page Component
const AuthPage = ({ initialMode = 'login', onBackToLanding }) => {
  const [isLogin, setIsLogin] = useState(initialMode === 'login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [phone, setPhone] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const { signUp, signIn, user } = useAuth();

  const validateForm = () => {
    if (!email || !password) {
      setError('Please fill in email and password');
      return false;
    }

    if (!email.includes('@')) {
      setError('Please enter a valid email address');
      return false;
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters');
      return false;
    }

    if (!isLogin) {
      if (!firstName || !lastName) {
        setError('Please fill in your first and last name');
        return false;
      }
      if (!phone) {
        setError('Please enter your phone number');
        return false;
      }
    }

    return true;
  };

  const handleSubmit = async () => {
    setError('');
    setSuccessMessage('');

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      if (isLogin) {
        console.log('Attempting login...');
        const { data, error } = await signIn(email, password);
        
        if (error) {
          console.error('Login failed:', error);
          setError(error.message || 'Login failed. Please check your credentials.');
          return;
        }

        console.log('Login successful');
        // Success! User will be redirected by auth state change
        
      } else {
        console.log('Attempting signup...');
        console.log('Form data:', { email, firstName, lastName, phone });
        
        const signupResult = await signUp(email, password, {
          firstName,
          lastName,
          phone
        });
        
        console.log('Signup result:', signupResult);
        const { data, error, needsConfirmation, message } = signupResult;
        
        if (error) {
          console.error('Signup failed:', error);
          setError(error.message || 'Signup failed. Please try again.');
          return;
        }

        // Handle email confirmation requirement
        if (needsConfirmation) {
          console.log('✅ Email confirmation required, showing message');
          setSuccessMessage(message || 'Account created! Please check your email and click the confirmation link to complete signup.');
          // Clear form fields on successful signup
          setEmail('');
          setPassword('');
          setFirstName('');
          setLastName('');
          setPhone('');
          return;
        }

        // Fallback: if we have data but user is not signed in, show confirmation message
        if (data && data.user && !user) {
          console.log('🔄 Fallback: User created but not signed in - likely needs email confirmation');
          setSuccessMessage('Account created! Please check your email and click the confirmation link to complete signup.');
          // Clear form fields on successful signup
          setEmail('');
          setPassword('');
          setFirstName('');
          setLastName('');
          setPhone('');
          return;
        }

        // Final fallback: if signup was successful but we're not sure about confirmation status
        if (data && data.user) {
          console.log('⏰ Setting timeout fallback for email confirmation message');
          // Wait 2 seconds to see if user gets signed in automatically
          setTimeout(() => {
            if (!user) {
              console.log('🚨 Timeout fallback: Showing email confirmation message');
              setSuccessMessage('Account created! Please check your email and click the confirmation link to complete signup.');
              // Clear form fields
              setEmail('');
              setPassword('');
              setFirstName('');
              setLastName('');
              setPhone('');
            }
          }, 2000);
          return;
        }

        console.log('Signup successful - immediate login');
        // Success! User will be redirected by auth state change
      }
    } catch (error) {
      console.error('Auth error:', error);
      setError('An unexpected error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDemoLogin = async () => {
    setEmail('demo@ai750credit.com');
    setPassword('demo123');
    setIsLogin(true);
    setError('');
    setSuccessMessage('');
    
    // Small delay to show the filled form
    setTimeout(() => {
      handleSubmit();
    }, 500);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center px-4">
      <div className="max-w-md w-full">
        <div className="bg-white rounded-2xl shadow-2xl p-8 relative">
          
          {/* Back Button */}
          {onBackToLanding && (
            <button
              onClick={onBackToLanding}
              className="absolute top-4 left-4 text-gray-400 hover:text-gray-600 flex items-center space-x-1 transition-colors"
            >
              <span>←</span>
              <span className="text-sm">Back</span>
            </button>
          )}

          <div className="text-center mb-8">
            <div className="flex items-center justify-center space-x-2 mb-4">
              <Zap className="w-8 h-8 text-blue-600" />
              <span className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                AI750Credit
              </span>
            </div>
            <h2 className="text-xl font-semibold text-gray-800">
              {isLogin ? 'Welcome Back' : 'Start Your Journey to 750+'}
            </h2>
            <p className="text-gray-600 mt-2">
              {isLogin ? 'Sign in to your account' : 'Create your account today'}
            </p>
          </div>

          <div className="space-y-4">
            {!isLogin && (
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                  <input
                    type="text"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                  <input
                    type="text"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                  />
                </div>
              </div>
            )}

            {!isLogin && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                <input
                  type="tel"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  required
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSubmit()}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
              {!isLogin && (
                <p className="text-xs text-gray-500 mt-1">Must be at least 6 characters</p>
              )}
            </div>

            {error && (
              <div className="bg-red-50 text-red-800 p-3 rounded-lg text-sm">
                {error}
              </div>
            )}

            {successMessage && (
              <div className="bg-green-50 border border-green-200 text-green-800 p-4 rounded-lg text-sm">
                <div className="flex items-center mb-2">
                  <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                  <span className="font-semibold">Account Created Successfully!</span>
                </div>
                <p className="mb-3">{successMessage}</p>
                <div className="bg-green-100 rounded-lg p-3 text-xs space-y-1">
                  <p className="flex items-center">
                    <span className="mr-2">📧</span>
                    <span>Check your email inbox and spam folder</span>
                  </p>
                  <p className="flex items-center">
                    <span className="mr-2">🔗</span>
                    <span>Click the confirmation link to activate your account</span>
                  </p>
                  <p className="flex items-center">
                    <span className="mr-2">↩️</span>
                    <span>Return here to sign in after confirming</span>
                  </p>
                </div>
                <div className="mt-3 pt-2 border-t border-green-200">
                  <button
                    onClick={() => {
                      setIsLogin(true);
                      setSuccessMessage('');
                    }}
                    className="text-green-700 hover:text-green-800 font-medium text-sm underline"
                  >
                    Go to Sign In →
                  </button>
                </div>
              </div>
            )}

            <button
              onClick={handleSubmit}
              disabled={loading}
              className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all disabled:opacity-50"
            >
              {loading ? (
                <div className="flex items-center justify-center space-x-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>{isLogin ? 'Signing In...' : 'Creating Account...'}</span>
                </div>
              ) : (
                <span>{isLogin ? 'Sign In' : 'Create Account'}</span>
              )}
            </button>
          </div>

          <div className="mt-6 text-center">
            <button
              onClick={() => {
                setIsLogin(!isLogin);
                setError('');
                setSuccessMessage('');
              }}
              className="text-blue-600 hover:text-blue-700 font-medium"
            >
              {isLogin ? "Don't have an account? Sign up" : 'Already have an account? Sign in'}
            </button>
          </div>

          <div className="mt-4 text-center">
            <button
              onClick={handleDemoLogin}
              disabled={loading}
              className="text-sm text-gray-500 hover:text-gray-700 disabled:opacity-50"
            >
              🚀 Quick Demo Login
            </button>
          </div>

          {!isLogin && (
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-semibold text-blue-800 mb-2">🚀 What you get:</h3>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>• AI-powered dispute letter generation</li>
                <li>• Real-time credit monitoring</li>
                <li>• CFPB complaint management</li>
                <li>• Goodwill letter templates</li>
                <li>• 7-day free trial, then $49/month</li>
              </ul>
            </div>
          )}

          {/* Debug Info (remove in production) */}
          <div className="mt-4 p-2 bg-gray-100 rounded text-xs text-gray-600">
            <p>Debug: Check browser console for detailed logs</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Platform Component
const AI750CreditPlatform = ({ initialMode, onBackToLanding }) => {
  const { user, profile, loading, isAdmin } = useAuth();
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  // Enhanced state management
  const [creditScores] = useState([
    { id: '1', bureau: 'equifax', score: 680, score_date: '2024-12-15', created_at: new Date().toISOString() },
    { id: '2', bureau: 'transunion', score: 695, score_date: '2024-12-15', created_at: new Date().toISOString() },
    { id: '3', bureau: 'experian', score: 710, score_date: '2024-12-15', created_at: new Date().toISOString() },
  ]);
  
  const [freezeStatus, setFreezeStatus] = useState({
    experian: 'not_frozen',
    equifax: 'not_frozen', 
    transunion: 'not_frozen',
    innovis: 'not_frozen',
    lexisnexis: 'not_frozen',
    corelogic: 'not_frozen',
    sagestream: 'not_frozen',
    microbilt: 'not_frozen'
  });

  // Credit Report Analysis State
  const [parsedAccounts, setParsedAccounts] = useState([]);
  const [analyzingReports, setAnalyzingReports] = useState(false);
  const [reportAnalysis, setReportAnalysis] = useState(null);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Loading AI750Credit...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return <AuthPage initialMode={initialMode} onBackToLanding={onBackToLanding} />;
  }

  // Credit Report Analysis Functions
  const simulateCreditReportParsing = async () => {
    setAnalyzingReports(true);
    
    // Simulate AI parsing delay
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Mock parsed accounts from credit reports
    const mockParsedAccounts = [
      {
        id: 'acc_1',
        creditor: 'Capital One Bank',
        account: '****1234',
        balance: '$2,450',
        status: 'Open',
        payment_history: 'Late 30 days (3 times)',
        opened: '2020-03-15',
        last_reported: '2024-12-01',
        bureaus: ['equifax', 'transunion', 'experian'],
        disputes_possible: ['incorrect_payment'],
        dispute_priority: 'high',
        negative_items: [
          'Late payments reported incorrectly', 
          'Payment dates inconsistent across bureaus',
          'Balance amount varies between bureaus',
          'Account status shows different dates',
          'Payment history timeline errors'
        ]
      },
      {
        id: 'acc_2', 
        creditor: 'Real Estate Mortgage Servicer',
        account: '954709037****',
        balance: '$285,000',
        status: 'Current',
        payment_history: 'Late 30 days (2 times), Late 60 days (1 time)',
        opened: '2019-08-01',
        last_reported: '2024-11-30',
        bureaus: ['equifax', 'transunion', 'experian'],
        disputes_possible: ['incorrect_payment', 'duplicate_account'],
        dispute_priority: 'high',
        negative_items: ['Inconsistent reporting across bureaus', 'Dispute already filed - different outcomes']
      },
      {
        id: 'acc_3',
        creditor: 'Collection Agency ABC',
        account: '****5678',
        balance: '$1,200',
        status: 'Collection',
        payment_history: 'Collection account',
        opened: '2021-05-10',
        last_reported: '2024-12-05',
        bureaus: ['equifax', 'transunion'],
        disputes_possible: ['invalid_debt', 'account_not_mine'],
        dispute_priority: 'critical',
        negative_items: [
          'No validation provided', 
          'Original creditor unknown', 
          'Not on Experian - mixed reporting',
          'Collection date inconsistent',
          'Amount disputed but not corrected',
          'Violates statute of limitations'
        ]
      }
    ];

    const analysis = {
      total_accounts: mockParsedAccounts.length,
      negative_accounts: mockParsedAccounts.filter(acc => acc.negative_items.length > 0).length,
      disputable_accounts: mockParsedAccounts.filter(acc => acc.disputes_possible.length > 0).length,
      critical_priority: mockParsedAccounts.filter(acc => acc.dispute_priority === 'critical').length,
      high_priority: mockParsedAccounts.filter(acc => acc.dispute_priority === 'high').length,
      potential_score_impact: '+45-65 points',
      estimated_timeline: '3-6 months'
    };

    setParsedAccounts(mockParsedAccounts);
    setReportAnalysis(analysis);
    setAnalyzingReports(false);
  };

  // Header Component
  const Header = () => {
    const { signOut } = useAuth();
    
    const handleSignOut = async () => {
      await signOut();
    };

    return (
      <header className="bg-white border-b border-gray-200 px-4 lg:px-6 h-16 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500"
          >
            <Menu className="w-6 h-6" />
          </button>
          <div className="flex items-center space-x-2">
            <Zap className="w-6 h-6 text-blue-600" />
            <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              AI750Credit
            </span>
          </div>
        </div>

        <div className="flex items-center space-x-4">
          <div className="hidden md:flex items-center space-x-2 text-sm text-gray-600">
            <span>Welcome back,</span>
            <span className="font-semibold">{profile?.first_name || 'User'}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold">
              {(profile?.first_name || 'U')[0].toUpperCase()}
            </div>
            <button
              onClick={handleSignOut}
              className="flex items-center space-x-2 px-3 py-2 text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
            >
              <LogOut className="w-4 h-4" />
              <span>Sign Out</span>
            </button>
          </div>
        </div>
      </header>
    );
  };

  // Dashboard Component
  const DashboardComponent = () => {
    const getAverageScore = () => {
      if (creditScores.length === 0) return 0;
      const total = creditScores.reduce((sum, score) => sum + score.score, 0);
      return Math.round(total / creditScores.length);
    };

    const getLatestScores = () => {
      const latestByBureau = {};
      creditScores.forEach(score => {
        if (!latestByBureau[score.bureau] || 
            new Date(score.score_date) > new Date(latestByBureau[score.bureau].score_date)) {
          latestByBureau[score.bureau] = score;
        }
      });
      return latestByBureau;
    };

    const latestScores = getLatestScores();
    const averageScore = getAverageScore();

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Credit Repair Dashboard</h2>
          <p className="text-gray-600">Track your progress toward a 750+ credit score</p>
        </div>

        {/* Credit Score Overview */}
        <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl p-6 text-white text-center">
          <h3 className="text-lg font-semibold mb-2">Current Average Credit Score</h3>
          <div className="text-4xl font-bold mb-2">{averageScore || '---'}</div>
          <p className="text-blue-100 mb-4">
            {averageScore >= 750 ? '🎉 Excellent Credit!' : 
             averageScore >= 700 ? '👍 Good Credit' : 
             averageScore >= 650 ? '📈 Fair Credit' : 
             averageScore > 0 ? '🔧 Needs Work' : 'Add your scores to get started'}
          </p>
          {averageScore > 0 && averageScore < 750 && (
            <div className="bg-white bg-opacity-20 rounded-lg p-3">
              <p className="text-blue-100 text-sm mb-2">Goal: 750+ Credit Score</p>
              <div className="w-full bg-blue-400 rounded-full h-2">
                <div 
                  className="bg-white h-2 rounded-full transition-all duration-500"
                  style={{ width: `${Math.min(100, (averageScore / 750) * 100)}%` }}
                />
              </div>
              <p className="text-blue-100 text-sm mt-2">
                {750 - averageScore} points to reach your goal
              </p>
            </div>
          )}
        </div>

        {/* Individual Bureau Scores */}
        <div className="grid md:grid-cols-3 gap-4">
          {['equifax', 'transunion', 'experian'].map((bureau) => {
            const score = latestScores[bureau];
            return (
              <div key={bureau} className="bg-white border border-gray-200 rounded-xl p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-semibold text-gray-800 capitalize">{bureau}</h4>
                  <TrendingUp className="w-5 h-5 text-blue-500" />
                </div>
                <div className="text-2xl font-bold text-gray-800 mb-2">
                  {score?.score || '---'}
                </div>
                <p className="text-sm text-gray-600 mb-3">
                  {score ? `Updated ${new Date(score.score_date).toLocaleDateString()}` : 'No data yet'}
                </p>
                
                {score && (
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className={`h-2 rounded-full transition-all duration-500 ${
                        score.score >= 750 ? 'bg-green-500' :
                        score.score >= 700 ? 'bg-blue-500' :
                        score.score >= 650 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${Math.max(10, (score.score - 300) / 550 * 100)}%` }}
                    />
                  </div>
                )}
                
                {!score && (
                  <button 
                    onClick={() => setActiveTab('dashboard')}
                    className="w-full mt-2 px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors"
                  >
                    Add Score
                  </button>
                )}
              </div>
            );
          })}
        </div>

        {/* Quick Actions */}
        <div className="bg-white border border-gray-200 rounded-xl p-6">
          <h3 className="font-semibold text-gray-800 mb-4">🚀 Recommended Next Steps</h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Object.values(freezeStatus).filter(s => s === 'frozen').length < 8 && (
              <button
                onClick={() => setActiveTab('credit-freeze')}
                className="flex items-center space-x-3 p-4 border border-orange-200 rounded-lg hover:bg-orange-50 transition-colors text-left"
              >
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                  <Shield className="w-5 h-5 text-orange-600" />
                </div>
                <div>
                  <h4 className="font-medium text-orange-800">Freeze Credit</h4>
                  <p className="text-xs text-orange-600">
                    {8 - Object.values(freezeStatus).filter(s => s === 'frozen').length} bureaus left
                  </p>
                </div>
              </button>
            )}

            {parsedAccounts.length === 0 && (
              <button
                onClick={() => setActiveTab('upload')}
                className="flex items-center space-x-3 p-4 border border-blue-200 rounded-lg hover:bg-blue-50 transition-colors text-left"
              >
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                  <Upload className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-blue-800">Upload Reports</h4>
                  <p className="text-xs text-blue-600">Start AI analysis</p>
                </div>
              </button>
            )}

            <button
              onClick={() => setActiveTab('goodwill')}
              className="flex items-center space-x-3 p-4 border border-purple-200 rounded-lg hover:bg-purple-50 transition-colors text-left"
            >
              <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center">
                <Mail className="w-5 h-5 text-purple-600" />
              </div>
              <div>
                <h4 className="font-medium text-purple-800">Goodwill Letters</h4>
                <p className="text-xs text-purple-600">Request removal</p>
              </div>
            </button>

            <button
              onClick={() => setActiveTab('cfpb')}
              className="flex items-center space-x-3 p-4 border border-red-200 rounded-lg hover:bg-red-50 transition-colors text-left"
            >
              <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-5 h-5 text-red-600" />
              </div>
              <div>
                <h4 className="font-medium text-red-800">CFPB Complaints</h4>
                <p className="text-xs text-red-600">Federal intervention</p>
              </div>
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Upload Component
  const UploadComponent = () => {
    const [dragActive, setDragActive] = useState(false);
    const [uploading, setUploading] = useState(false);
    const [uploadedFiles, setUploadedFiles] = useState([]);

    const handleDrag = (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (e.type === "dragenter" || e.type === "dragover") {
        setDragActive(true);
      } else if (e.type === "dragleave") {
        setDragActive(false);
      }
    };

    const handleDrop = (e) => {
      e.preventDefault();
      e.stopPropagation();
      setDragActive(false);
      
      const files = e.dataTransfer.files;
      if (files && files.length > 0) {
        handleFiles(files);
      }
    };

    const handleFileSelect = (e) => {
      const files = e.target.files;
      if (files && files.length > 0) {
        handleFiles(files);
      }
    };

    const handleFiles = async (files) => {
      setUploading(true);
      
      let hasCreditReport = false;
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        await new Promise(resolve => setTimeout(resolve, 1000));

        const newFile = {
          id: Math.random().toString(36).substr(2, 9),
          name: file.name,
          size: file.size,
          type: file.type,
          upload_date: new Date().toISOString(),
          status: 'processed',
          file_type: 'unknown'
        };

        if (file.name.toLowerCase().includes('credit') || 
            file.name.toLowerCase().includes('report') ||
            file.name.toLowerCase().includes('equifax') ||
            file.name.toLowerCase().includes('experian') ||
            file.name.toLowerCase().includes('transunion')) {
          hasCreditReport = true;
          newFile.is_credit_report = true;
          newFile.file_type = 'credit_report';
        }

        setUploadedFiles(prev => [newFile, ...prev]);
      }

      setUploading(false);
      
      if (hasCreditReport) {
        setTimeout(() => {
          simulateCreditReportParsing();
        }, 1000);
      }
    };

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Upload Credit Reports</h2>
          <p className="text-gray-600">Upload your credit reports and documents for AI-powered analysis</p>
        </div>

        <div 
          className={`border-2 border-dashed rounded-xl p-8 text-center transition-all ${
            dragActive 
              ? 'border-blue-500 bg-blue-50' 
              : 'border-gray-300 hover:border-gray-400'
          }`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-800 mb-2">
            Drop your credit reports here
          </h3>
          <p className="text-gray-600 mb-4">
            or click to browse your files
          </p>
          <input
            type="file"
            multiple
            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt"
            onChange={handleFileSelect}
            className="hidden"
            id="file-upload"
          />
          <label
            htmlFor="file-upload"
            className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors cursor-pointer"
          >
            <Upload className="w-4 h-4 mr-2" />
            Choose Files
          </label>
          <p className="text-xs text-gray-500 mt-4">
            Supports PDF, DOC, DOCX, JPG, PNG files up to 10MB each
          </p>
        </div>

        {uploading && (
          <div className="bg-white border border-gray-200 rounded-xl p-6">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-semibold text-gray-800">Uploading...</h3>
              <span className="text-sm text-gray-600">Processing...</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div className="bg-blue-600 h-2 rounded-full transition-all duration-300 animate-pulse" style={{ width: '60%' }} />
            </div>
          </div>
        )}

        {uploadedFiles.length > 0 && (
          <div className="bg-white border border-gray-200 rounded-xl p-6">
            <h3 className="font-semibold text-gray-800 mb-4">Uploaded Files</h3>
            <div className="space-y-4">
              {uploadedFiles.map((file) => (
                <div key={file.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <FileText className="w-8 h-8 text-blue-600" />
                      <div>
                        <h4 className="font-medium text-gray-800">{file.name}</h4>
                        <p className="text-sm text-gray-600">
                          {(file.size / 1024 / 1024).toFixed(1)} MB • Uploaded {new Date(file.upload_date).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                        {file.status}
                      </span>
                      {file.is_credit_report && (
                        <span className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800">
                          Credit Report
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {analyzingReports && (
          <div className="bg-white border border-gray-200 rounded-xl p-6">
            <div className="flex items-center justify-center space-x-4 mb-4">
              <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              <div>
                <h3 className="font-semibold text-gray-800">🤖 AI Analyzing Credit Reports...</h3>
                <p className="text-sm text-gray-600">Extracting accounts and identifying dispute opportunities</p>
              </div>
            </div>
          </div>
        )}

        {reportAnalysis && parsedAccounts.length > 0 && (
          <div className="space-y-6">
            <div className="bg-gradient-to-r from-green-500 to-blue-600 rounded-2xl p-6 text-white">
              <h3 className="text-xl font-bold mb-4">🎯 Credit Report Analysis Complete</h3>
              <div className="grid md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold">{reportAnalysis.total_accounts}</div>
                  <div className="text-sm text-green-100">Total Accounts</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-200">{reportAnalysis.disputable_accounts}</div>
                  <div className="text-sm text-green-100">Disputable Items</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-200">{reportAnalysis.potential_score_impact}</div>
                  <div className="text-sm text-green-100">Potential Increase</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold">{reportAnalysis.estimated_timeline}</div>
                  <div className="text-sm text-green-100">Est. Timeline</div>
                </div>
              </div>
            </div>

            <div className="bg-white border border-gray-200 rounded-xl p-6">
              <h3 className="font-semibold text-gray-800 mb-4">Quick Actions</h3>
              <div className="grid md:grid-cols-3 gap-4">
                <button 
                  onClick={() => setActiveTab('disputes')}
                  className="flex items-center justify-between p-4 border border-red-200 rounded-lg hover:bg-red-50 transition-colors"
                >
                  <div>
                    <h4 className="font-medium text-red-800">Create Disputes</h4>
                    <p className="text-sm text-red-600">{reportAnalysis.disputable_accounts} items found</p>
                  </div>
                  <FileText className="w-8 h-8 text-red-500" />
                </button>
                
                <button 
                  onClick={() => setActiveTab('goodwill')}
                  className="flex items-center justify-between p-4 border border-purple-200 rounded-lg hover:bg-purple-50 transition-colors"
                >
                  <div>
                    <h4 className="font-medium text-purple-800">Goodwill Letters</h4>
                    <p className="text-sm text-purple-600">Request removal</p>
                  </div>
                  <Mail className="w-8 h-8 text-purple-500" />
                </button>

                <button 
                  onClick={() => setActiveTab('cfpb')}
                  className="flex items-center justify-between p-4 border border-orange-200 rounded-lg hover:bg-orange-50 transition-colors"
                >
                  <div>
                    <h4 className="font-medium text-orange-800">CFPB Complaints</h4>
                    <p className="text-sm text-orange-600">Federal intervention</p>
                  </div>
                  <AlertTriangle className="w-8 h-8 text-orange-500" />
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Simple placeholder components for other tabs
  const CreditFreezeComponent = () => (
    <div className="text-center py-12">
      <Shield className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Credit Freeze Management</h3>
      <p className="text-gray-600">Freeze your credit with all major bureaus for protection.</p>
    </div>
  );

  const DisputesComponent = () => (
    <div className="text-center py-12">
      <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">AI-Powered Disputes</h3>
      <p className="text-gray-600">Generate FCRA-compliant dispute letters automatically.</p>
    </div>
  );

  const GoodwillComponent = () => (
    <div className="text-center py-12">
      <Mail className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Goodwill Letters</h3>
      <p className="text-gray-600">Professional templates to request removal of negative items.</p>
    </div>
  );

  const CFPBComponent = () => (
    <div className="text-center py-12">
      <AlertTriangle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">CFPB Complaints</h3>
      <p className="text-gray-600">File federal complaints when credit bureaus fail to resolve disputes.</p>
    </div>
  );

  const MonitorComponent = () => (
    <div className="text-center py-12">
      <Target className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Credit Monitoring</h3>
      <p className="text-gray-600">Real-time alerts and credit score tracking.</p>
    </div>
  );

  const SettingsComponent = () => (
    <div className="text-center py-12">
      <Settings className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Settings</h3>
      <p className="text-gray-600">Manage your account preferences and settings.</p>
    </div>
  );

  const BillingComponent = () => (
    <div className="text-center py-12">
      <CreditCard className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Billing & Subscription</h3>
      <p className="text-gray-600">Manage your subscription and billing information.</p>
    </div>
  );

  const TrackComponent = () => (
    <div className="text-center py-12">
      <Clock className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Progress Timeline</h3>
      <p className="text-gray-600">Track your credit repair journey step by step.</p>
    </div>
  );

  const AccountComponent = () => (
    <div className="text-center py-12">
      <User className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Account Management</h3>
      <p className="text-gray-600">Manage your subscription and billing information.</p>
    </div>
  );

  const PrivacyPolicyComponent = () => (
    <div className="text-center py-12">
      <Shield className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Privacy Policy</h3>
      <p className="text-gray-600">How we protect and handle your personal information.</p>
    </div>
  );

  const TermsAndConditionsComponent = () => (
    <div className="text-center py-12">
      <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
      <h3 className="text-lg font-semibold text-gray-800 mb-2">Terms and Conditions</h3>
      <p className="text-gray-600">Legal terms governing your use of AI750Credit services.</p>
    </div>
  );

  // Sidebar Component
  const Sidebar = () => {
    const menuItems = [
      { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
      { id: 'credit-freeze', label: 'Credit Freeze', icon: Shield },
      { id: 'upload', label: 'Upload', icon: Upload },
      { id: 'disputes', label: 'Disputes', icon: FileText },
      { id: 'track', label: 'Track', icon: Clock },
      { id: 'goodwill', label: 'Goodwill', icon: Mail },
      { id: 'cfpb', label: 'CFPB', icon: AlertTriangle },
      { id: 'monitor', label: 'Monitor', icon: Target },
      { id: 'settings', label: 'Settings', icon: Settings },
      { id: 'billing', label: 'Billing', icon: CreditCard },
      { id: 'privacy-policy', label: 'Privacy Policy', icon: Shield },
      { id: 'terms-conditions', label: 'Terms & Conditions', icon: FileText },
      { id: 'account', label: 'Account', icon: User }
    ];

    if (isAdmin) {
      menuItems.splice(-2, 0, { id: 'user-management', label: 'User Management', icon: Users });
    }

    return (
      <>
        {sidebarOpen && (
          <div 
            className="fixed inset-0 bg-gray-600 bg-opacity-50 lg:hidden z-40"
            onClick={() => setSidebarOpen(false)}
          />
        )}

        <div className={`
          fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0
          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
        `}>
          <div className="flex flex-col h-full">
            <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
              <div className="flex items-center space-x-2">
                <Zap className="w-6 h-6 text-blue-600" />
                <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  AI750Credit
                </span>
              </div>
              <button
                onClick={() => setSidebarOpen(false)}
                className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold">
                  {(profile?.first_name || 'U')[0].toUpperCase()}
                </div>
                <div>
                  <p className="font-medium text-gray-800">
                    {profile?.first_name && profile?.last_name 
                      ? `${profile.first_name} ${profile.last_name}`
                      : 'User'
                    }
                  </p>
                  <p className="text-sm text-gray-600">
                    {profile?.subscription_status === 'active' ? 'Premium Member' : 'Free Trial'}
                  </p>
                </div>
              </div>
            </div>

            <nav className="flex-1 px-4 py-4 space-y-1 overflow-y-auto">
              {menuItems.map((item) => {
                const Icon = item.icon;
                const isActive = activeTab === item.id;
                
                return (
                  <button
                    key={item.id}
                    onClick={() => {
                      setActiveTab(item.id);
                      setSidebarOpen(false);
                    }}
                    className={`
                      w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors
                      ${isActive 
                        ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' 
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-800'
                      }
                    `}
                  >
                    <Icon className="w-5 h-5" />
                    <span className="font-medium">{item.label}</span>
                  </button>
                );
              })}
            </nav>

            <div className="p-4 border-t border-gray-200">
              {profile?.subscription_status === 'trial' && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-2">
                    <Clock className="w-4 h-4 text-blue-600" />
                    <span className="text-sm font-medium text-blue-800">Free Trial</span>
                  </div>
                  <p className="text-xs text-blue-700 mb-2">
                    {profile?.trial_ends_at 
                      ? `${Math.max(0, Math.ceil((new Date(profile.trial_ends_at) - new Date()) / (1000 * 60 * 60 * 24)))} days left`
                      : '5 days left'
                    }
                  </p>
                  <button className="w-full bg-blue-600 text-white text-xs py-2 rounded hover:bg-blue-700">
                    Upgrade Now
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </>
    );
  };

  const renderActiveComponent = () => {
    switch (activeTab) {
      case 'dashboard': return <DashboardComponent />;
      case 'credit-freeze': return <CreditFreezeComponent />;
      case 'upload': return <UploadComponent />;
      case 'disputes': return <DisputesComponent />;
      case 'goodwill': return <GoodwillComponent />;
      case 'cfpb': return <CFPBComponent />;
      case 'monitor': return <MonitorComponent />;
      case 'settings': return <SettingsComponent />;
      case 'billing': return <BillingComponent />;
      case 'privacy-policy': return <PrivacyPolicyComponent />;
      case 'terms-conditions': return <TermsAndConditionsComponent />;
      case 'track': return <TrackComponent />;
      case 'account': return <AccountComponent />;
      case 'user-management': return <UserManagementComponent
        profile={profile}
        isAdmin={isAdmin}
        user={user}
      />;
      default: return <DashboardComponent />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Sidebar />
      
      <div className="flex-1 flex flex-col lg:ml-0">
        <Header />
        
        <main className="flex-1 p-4 lg:p-6 overflow-y-auto">
          {renderActiveComponent()}
        </main>
      </div>
    </div>
  );
};

const App = ({ initialMode = 'login', onBackToLanding }) => {
  return (
    <AuthProvider>
      <AI750CreditPlatform initialMode={initialMode} onBackToLanding={onBackToLanding} />
    </AuthProvider>
  );
};

export default App;